#!/bin/bash

# git-push-all script
# Checks if gitverse and github remotes exist, adds them if not, then pushes current branch to both

set -e  # Exit on any error

# Define remote configurations
GITVERSE_NAME="gitverse"
GITVERSE_URL="ssh://git@gitverse.ru:2222/anarchic/oleg-deming-protocol.git"
GITHUB_NAME="github"
GITHUB_URL="git@github.com:anarchic-pro/oleg-deming-protocol.git"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository!"
    exit 1
fi

# Get current branch name
CURRENT_BRANCH=$(git branch --show-current)
if [ -z "$CURRENT_BRANCH" ]; then
    print_error "Unable to determine current branch!"
    exit 1
fi

print_status "Current branch: $CURRENT_BRANCH"

# Function to check if remote exists
remote_exists() {
    git remote get-url "$1" > /dev/null 2>&1
}

# Function to add remote if it doesn't exist
add_remote_if_missing() {
    local name=$1
    local url=$2
    
    if remote_exists "$name"; then
        local existing_url=$(git remote get-url "$name")
        print_status "Remote '$name' already exists with URL: $existing_url"
        
        # Check if URL matches expected URL
        if [ "$existing_url" != "$url" ]; then
            print_warning "Remote '$name' URL differs from expected. Expected: $url"
            read -p "Do you want to update the URL? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git remote set-url "$name" "$url"
                print_success "Updated remote '$name' URL to: $url"
            fi
        fi
    else
        print_status "Adding remote '$name' with URL: $url"
        git remote add "$name" "$url"
        print_success "Added remote '$name'"
    fi
}

# Add remotes if they don't exist
print_status "Checking and adding remotes..."
add_remote_if_missing "$GITVERSE_NAME" "$GITVERSE_URL"
add_remote_if_missing "$GITHUB_NAME" "$GITHUB_URL"

# Show all remotes
print_status "Current remotes:"
git remote -v

echo

# Function to push to remote with error handling
push_to_remote() {
    local remote=$1
    local branch=$2
    
    print_status "Pushing '$branch' to '$remote'..."
    
    if git push "$remote" "$branch"; then
        print_success "Successfully pushed to '$remote'"
        return 0
    else
        print_error "Failed to push to '$remote'"
        return 1
    fi
}

# Push to both remotes
print_status "Starting push to all remotes..."
echo

# Track success/failure
GITVERSE_SUCCESS=false
GITHUB_SUCCESS=false

# Push to gitverse
if push_to_remote "$GITVERSE_NAME" "$CURRENT_BRANCH"; then
    GITVERSE_SUCCESS=true
fi

echo

# Push to github
if push_to_remote "$GITHUB_NAME" "$CURRENT_BRANCH"; then
    GITHUB_SUCCESS=true
fi

echo

# Summary
print_status "Push Summary:"
if [ "$GITVERSE_SUCCESS" = true ]; then
    print_success "✓ gitverse: SUCCESS"
else
    print_error "✗ gitverse: FAILED"
fi

if [ "$GITHUB_SUCCESS" = true ]; then
    print_success "✓ github: SUCCESS"
else
    print_error "✗ github: FAILED"
fi

# Exit with appropriate code
if [ "$GITVERSE_SUCCESS" = true ] && [ "$GITHUB_SUCCESS" = true ]; then
    print_success "All pushes completed successfully!"
    exit 0
elif [ "$GITVERSE_SUCCESS" = true ] || [ "$GITHUB_SUCCESS" = true ]; then
    print_warning "Some pushes failed, but at least one succeeded."
    exit 1
else
    print_error "All pushes failed!"
    exit 2
fi